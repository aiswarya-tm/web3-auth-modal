{"version":3,"file":"static/js/703.27ff95e5.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/abstract/montgomery.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":[null,"export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n\n// We accept hex strings besides Uint8Array for simplicity\nexport type Hex = Uint8Array | string;\n// Very few implementations accept numbers, we do it to ease learning curve\nexport type PrivKey = Hex | bigint;\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// Caching slows it down 2-3x\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  if (hex.length % 2) throw new Error('hex string is invalid: unpadded ' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// Big Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport const numberToBytesBE = (n: bigint, len: number) =>\n  hexToBytes(n.toString(16).padStart(len * 2, '0'));\nexport const numberToBytesLE = (n: bigint, len: number) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nexport const numberToVarBytesBE = (n: bigint) => hexToBytes(numberToHexUnpadded(n));\n\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n// Copies several Uint8Arrays into one.\nexport function concatBytes(...arrs: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrs.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\n// Bit operations\n\n// Amount of bits inside bigint (Same as n.toString(2).length)\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nexport const bitGet = (n: bigint, pos: number) => (n >> BigInt(pos)) & _1n;\n// Sets single bit at position\nexport const bitSet = (n: bigint, pos: number, value: boolean) =>\n  n | ((value ? _1n : _0n) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Currently completly inconsistent naming:\n// - readable: add, mul, sqr, sqrt, inv, div, pow, eq, sub\n// - unreadable mess: addition, multiply, square, squareRoot, inversion, divide, power, equals, subtract\n\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex) => Uint8Array;\n  verify: (sig: Hex, message: Hex, publicKey: Hex) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n ** BigInt(nByteLength * 8);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // if x=0 and x_0 = 1, fail\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // Accepts 0 as well\n  function assertFieldElement(n: bigint): bigint {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU: bigint, scalar: bigint): bigint {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    // This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP\n    // fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    // u[fieldLen-1] crashes QuickJS (TypeError: out-of-bound numeric index)\n    if (fieldLen === montgomeryBytes) u[fieldLen - 1] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    if (bytes.length !== montgomeryBytes && bytes.length !== fieldLen)\n      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${bytes.length}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'string',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards, ExtPointType } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { mod, pow2, isNegativeLE, Field, FpSqrtEven } from './abstract/modular.js';\nimport {\n  equalBytes,\n  bytesToHex,\n  bytesToNumberLE,\n  numberToBytesLE,\n  Hex,\n  ensureBytes,\n} from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n ** 255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n ** 252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\nexport const ed25519ctx = twistedEdwards({ ...ed25519Defaults, domain: ed25519_domain });\nexport const ed25519ph = twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = montgomery({\n  P: ED25519_P,\n  a: BigInt(486662),\n  montgomeryBits: 255, // n is 253 bits\n  nByteLength: 32,\n  Gu: BigInt(9),\n  powPminus2: (x: bigint): bigint => {\n    const P = ED25519_P;\n    // x^(p-2) aka x^(2^255-21)\n    const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n    return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n  },\n  adjustScalarBytes,\n  randomBytes,\n});\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const aPub = ed25519.getPublicKey(utils.randomPrivateKey());\n *   x25519.getSharedSecret(edwardsToMontgomery(aPub), edwardsToMontgomery(someonesPub))\n */\nexport function edwardsToMontgomery(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((y - _1n) * Fp.inv(y + _1n)));\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) = map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst { hashToCurve, encodeToCurve } = htf.createHasher(\n  ed25519.ExtendedPoint,\n  (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n  {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n  }\n);\nexport { hashToCurve, encodeToCurve };\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistrettoPoint)) throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nexport class RistrettoPoint {\n  static BASE = new RistrettoPoint(ed25519.ExtendedPoint.BASE);\n  static ZERO = new RistrettoPoint(ed25519.ExtendedPoint.ZERO);\n\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistrettoPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-bit hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-bit output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistrettoPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistrettoPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistrettoPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistrettoPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistrettoPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistrettoPoint): RistrettoPoint {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistrettoPoint): RistrettoPoint {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistrettoPoint {\n    return new RistrettoPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistrettoPoint {\n    return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\n\n// https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/14/\n// Appendix B.  Hashing to ristretto255\nexport const hash_to_ristretto255 = (msg: Uint8Array, options: htf.htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = htf.expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistrettoPoint.hashToCurve(uniform_bytes);\n  return P;\n};\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): SignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => SignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number) {\n      return new Signature(this.r, this.s, recovery);\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): Signature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash (not message: you need to hash it by yourself).\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param opts `lowS, extraEntropy, prehash`\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): Signature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const drbg = ut.createHmacDrbg<Signature>(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = _2n ** (i - _2n); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = {\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n};\n\nconst isoMap = htf.isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n      '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n      '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n      '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n      '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n      '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n      '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n      '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n      '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n      '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n      '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n      '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n      '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n);\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11')),\n});\nexport const { hashToCurve, encodeToCurve } = htf.createHasher(\n  secp256k1.ProjectivePoint,\n  (scalars: bigint[]) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n  },\n  {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }\n);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      };\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["_get","require","_getPrototypeOf","_assertThisInitialized","_createForOfIteratorHelper","_inherits","_createSuper","_classCallCheck","_createClass","buffer_1","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","key","value","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","_Layout","_super","apply","arguments","Error","GreedyCount","_ExternalLayout","_super2","_this","elementSpan","undefined","call","rem","Math","floor","src","OffsetLayout","_ExternalLayout2","_super3","layout","_this2","UInt","UIntBE","decode","encode","_Layout2","_super4","_this3","readUIntLE","writeUIntLE","_Layout3","_super5","_this4","readUIntBE","writeUIntBE","Int","_Layout4","_super6","_this5","readIntLE","writeIntLE","IntBE","_Layout5","_super7","_this6","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","_Layout6","_super8","readUInt32LE","split","writeUInt32LE","NearUInt64BE","_Layout7","_super9","readUInt32BE","writeUInt32BE","NearInt64","_Layout8","_super10","readInt32LE","writeInt32LE","NearInt64BE","_Layout9","_super11","readInt32BE","writeInt32BE","Float","_Layout10","_super12","readFloatLE","writeFloatLE","FloatBE","_Layout11","_super13","readFloatBE","writeFloatBE","Double","_Layout12","_super14","readDoubleLE","writeDoubleLE","DoubleBE","_Layout13","_super15","readDoubleBE","writeDoubleBE","Sequence","_Layout14","_super16","elementLayout","count","_this7","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","_Layout15","_super17","fields","decodePrefixes","_this8","Array","isArray","acc","_step","_iterator","s","n","done","fd","err","e","f","fsp","_step2","dest","makeDestinationObject","_iterator2","_step3","firstOffset","lastOffset","lastWrote","_iterator3","fv","_step4","_iterator4","shift","_step5","_iterator5","_step6","_iterator6","UnionDiscriminator","UnionLayoutDiscriminator","_UnionDiscriminator","_super18","_this9","Union","_Layout16","_super19","discr","defaultLayout","_this10","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","_Layout17","_super20","union","_this11","fromArray","fixBitwiseResult","BitStructure","_Layout18","_super21","word","msb","_this12","_packedSetValue","_packedGetValue","_step7","_iterator7","_step8","_iterator8","bits","bf","BitField","Boolean","_step9","_iterator9","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","_BitField","_super22","Blob","_Layout19","_super23","_this13","slice","srcBuffer","write","toString","CString","_Layout20","_super24","String","srcb","copy","UTF8","_Layout21","_super25","maxSpan","_this14","Constant","_Layout22","_super26","_this15","exports","number","isSafeInteger","concat","bytes","_len","lengths","_key","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","createView","arr","DataView","byteLength","rotr","Uint32Array","padStart","utf8ToBytes","str","TextEncoder","toBytes","data","concatBytes","arrays","every","a","result","pad","set","Hash","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","_Hash","padOffset","isLE","pos","view","len","take","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","destroy","to","_to","_toConsumableArray","U32_MASK64","fromBig","u64","lst","le","Ah","Al","_fromBig","_ref","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","_u64$split","map","_u64$split2","_slicedToArray","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","_SHA","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","_u64$add","All","_u64$add2","_u64$add3","_u64$add4","_u64$add5","_u64$add6","_u64$add7","_u64$add8","_u64$add9","SHA512_224","_SHA2","SHA512_256","_SHA3","SHA384","_SHA4","sha512","_0n","_1n","_2n","u8a","hexes","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","arrs","r","forEach","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","_len2","_key2","reseed","seed","gen","sl","pred","validatorFns","bigint","val","function","boolean","string","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_i","_Object$entries","entries","_Object$entries$_i","_i2","_Object$entries2","_Object$entries2$_i","_3n","_4n","_5n","_8n","mod","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","validateField","opts","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","redef","_nLength","sqrtP","freeze","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","wNAF","constTimeNegate","condition","item","negate","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","_opts","points","base","window","precomputes","_opts2","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","_objectSpread","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","delete","X","Y","T","X2","Y2","Z2","Z4","aX2","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","equals","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","wnaf","normalizeZ","scalar","_this$wNAF","I","multiplyUnsafe","iz","z","ax","ay","zz","_this$toAffine","toRawBytes","toInv","fromAffine","normed","lastByte","y2","_uvRatio","privKey","getExtendedPublicKey","point","modN","modN_LE","hashed","head","prefix","multiply","pointBytes","hashDomainToScalar","context","msgs","msg","verifyOpts","_setWindowSize","utils","randomPrivateKey","precompute","getPublicKey","sign","options","_getExtendedPublicKey","R","verify","sig","publicKey","SB","fromHex","error","subtract","clearCofactor","ExtendedPoint","os2ip","i2osp","strxor","isBytes","isNum","hash_to_field","DST","expand","_DST","prb","dst","validateDST","log2p","L","len_in_bytes","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","createHasher","def","hashToCurve","u0","u1","assertValidity","encodeToCurve","encodeDST","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","ed25519_domain","montgomeryBits","powPminus2","Gu","montgomeryBytes","fieldLen","cswap","swap","x_2","x_3","dummy","assertFieldElement","a24","encodeUCoordinate","scalarMult","pointU","uEnc","decodeUCoordinate","_scalar","decodeScalar","pu","sw","x_1","z_2","z_3","t","k_t","AA","BB","DA","CB","dacb","da_cb","z2","montgomeryLadder","GuBytes","scalarMultBase","montgomery","_ed25519_pow_2_252_","ELL2_C1","ELL2_C2","ELL2_C3","ELL2_C4","ELL2_J","ELL2_C1_EDWARDS","FpSqrtEven","map_to_curve_elligator2_edwards25519","_map_to_curve_elligat","tv1","xd","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","y1","x2n","y21","y22","gx2","e2","e3","xn","e4","xMn","xMd","yMn","yMd","map_to_curve_elligator2_curve25519","yn","yd","_htf$createHasher","htf","scalars","assertRstPoint","RistrettoPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","MAX_255B","bytes255ToNumberLE","calcElligatorRistrettoMap","r0","Ns","Ns_D_is_sq","s_","Nt","s2","W0","W1","W2","W3","ep","_this$ep","u2","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","_this$ep2","_other$ep","one","two","ap","R1","R2","_ed25519$CURVE","emsg","u1_2","u2_2","_invertSqrt2","Dx","Dy","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","SHA224","sha256","toFailures","StructError","_TypeError","failure","failures","cached","rest","_objectWithoutProperties","_excluded","path","join","_cached","_wrapNativeSuper","isIterable","isObject","Symbol","iterator","print","JSON","stringify","toFailure","struct","branch","_result","refinement","_result$message","_regeneratorRuntime","wrap","_context","prev","next","t0","finish","stop","_marked","run","mark","_callee","_options$path","_options$branch","_options$coerce","coerce","_options$mask","valid","_failure","_step3$value","ts","_context2","coercer","schema","validator","Set","t1","refiner","t3","Struct","props","_props$coercer","_props$entries","_callee2","_context3","validate","is","tuples","tuple","input","_input$next","shiftIterator","_callee3","_context4","define","Element","_step9$value","_context7","Class","literal","constant","description","never","nullable","optional","record","Key","Value","_context13","keys","Elements","Never","_context15","_keys","_context16","Structs","_step18","_iterator18","_run","_toArray","_step19","_iterator19","unknown","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","keccak","bufferOut","writeInto","xofInto","keccak_256","genShake","hashCons","wrapConstructorWithOpts","b2n","h2b","DER","Err","_Error","DERErr","_parseInt","toSig","_DER$_parseInt","sBytes","_DER$_parseInt2","hexFromSig","shl","rhl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","assertPrjPoint","px","py","pz","left","right","U1","U2","b3","Z3","t4","t5","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","fake","_endo$splitScalar2","f1p","_this$wNAF2","f2p","_this$wNAF3","privateKey","_bits","ProjectivePoint","weierstrass","hmac","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","_weierstrassPoints","cat","hasEvenY","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","ir","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","isValidPrivateKey","groupOrder","minLen","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","fromPrivateKey","getSharedSecret","privateA","publicB","_prepSig","drbg","signature","_Point$BASE$multiplyA","sg","_sig","fromDER","derError","fromCompact","_sig2","HMAC","iHash","oHash","buf","getPrototypeOf","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","getHash","createCurve","a1","a2","POW_2_128","c2","fe","TAGGED_HASH_PREFIXES","taggedHash","tagP","tagH","charCodeAt","messages","pointToBytes","lift_x","xx","isoMap","COEFF","_COEFF$map","_COEFF$map2","xNum","xDen","yNum","yDen","mapSWU","sqrtRatio","o","c3","c4","c5","c6","c7","tv5","tv4","isQR","tvv5","SWUFpSqrtRatio","tv6","_sqrtRatio","mapToCurveSimpleSWU","_mapSWU","generateKeypair","privateScalar","secretKey","isOnCurve","_unused","toBuffer","isBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_Struct2","_Symbol$toStringTag2","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toArrayLike","zeroPad","alloc","_createWithSeed","_asyncToGenerator","fromPublicKey","programId","publicKeyBytes","abrupt","_x2","_x3","seeds","_createProgramAddress","createProgramAddressSync","_x4","_x5","address","nonce","seedsWithNonce","_findProgramAddress","findProgramAddressSync","_x6","_x7","pubkeyData","toStringTag","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","_Error2","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","_Error3","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","mapEntries","writableSigners","filter","isSigner","isWritable","readonlySigners","_ref3","writableNonSigners","_ref5","readonlyNonSigners","_ref7","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","_ref9","_ref11","_ref13","_ref15","lookupTable","_this$drainKeysFoundI","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","_this$drainKeysFoundI2","writableIndexes","drainedWritableKeys","_this$drainKeysFoundI3","_this$drainKeysFoundI4","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","_loop","_step2$value","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","numSignedAccounts","has","_","isProgramId","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","_compiledKeys$getMess","compile","payerKey","getMessageComponents","_compiledKeys$getMess2","compileInstructions","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","_loop2","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","_step10","_iterator10","encodedWritableIndexesLength","encodedReadonlyIndexesLength","_step11","compiledKeys","lookupTableAccounts","_iterator11","extractResult","extractTableLookup","_accountKeysFromLooku","_accountKeysFromLooku2","_extractResult","addressTableLookup","_extractResult$","_compiledKeys$getMess3","_compiledKeys$getMess4","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","version","DEFAULT_SIGNATURE","TransactionInstruction","_ref17","toJSON","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref18","items","console","warn","programIds","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","_uniqueMetas$splice","payerMeta","unshift","_step12","_iterator12","_loop3","signedKeys","unsignedKeys","_ref19","indexOf","compileMessage","pair","_compile","_getEstimatedFee","_callee4","connection","getFeeForMessage","sent","_x8","seen","_len3","_key3","uniqueSigners","_i4","_signers","signer","_partialSign","_len4","_key4","_i5","_signers2","_len5","_key5","_addSignature","sigpair","requireAllSignatures","_verifySignatures","serializeMessage","_step13","_iterator13","_step13$value","config","_Object$assign","verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","_ref20","keyObj","populate","sigPubkeyPair","isAccountSigner","isAccountWritable","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","_step16","messageData","signerPubkeys","_iterator16","_loop4","signerIndex","signaturesLength","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","_x9","_x10","_x11","_x12","_sendAndConfirmTransaction","_callee108","sendOptions","status","nonceAccountPubkey","_context108","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","_encodeDecode","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","chunkSize","_load","_callee5","program","balanceNeeded","programInfo","dataLayout","transactions","_data","_transaction","_dataLayout","_data2","_transaction2","deployCommitment","finalizeSignature","_yield$connection$con","_context5","getMinimumBalanceForRentExemption","getAccountInfo","executable","allocate","owner","transfer","bytesLengthPadding","_rpcEndpoint","all","getSlot","slot","MS_PER_SLOT","_x13","_x14","_x15","_x16","_x17","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","SendTransactionError","_Error4","logs","SolanaJSONRPCError","_Error5","_ref21","customMessage","code","fetchImpl","fetch","RpcWebSocketClient","_RpcWebSocketCommonCl","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","_get2","readyState","_len6","_key6","reject","_this$underlyingSocke2","_get3","_len7","_key7","RpcWebSocketCommonClient","AddressLookupTableAccount","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_ref24","_callee9","_requestPromises$requ","_extractCommitmentFro","requestHash","_context9","_buildArgs","fastStableStringify$1","_callee8","unsafeRes","_context8","_x22","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","_matches","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","_ref22","_callee6","info","init","modifiedFetchArgs","_context6","modifiedInfo","modifiedInit","_x18","_x19","clientBrowser","RpcClient","_ref23","_callee7","request","callback","too_many_requests_retries","waitTime","text","method","body","agent","headers","log","statusText","ok","_x20","_x21","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_getBalanceAndContext","_callee10","_extractCommitmentFro2","_context10","_x23","_x24","_getBalance","_callee11","_context11","getBalanceAndContext","then","catch","_x25","_x26","_getBlockTime","_callee12","_context12","_x27","_getMinimumLedgerSlot","_callee13","_getFirstAvailableBlock","_callee14","_context14","_getSupply","_callee15","configArg","_x28","_getTokenSupply","_callee16","tokenMintAddress","_x29","_x30","_getTokenAccountBalance","_callee17","tokenAddress","_context17","_x31","_x32","_getTokenAccountsByOwner","_callee18","ownerAddress","_extractCommitmentFro3","_args","_context18","_x33","_x34","_x35","_getParsedTokenAccountsByOwner","_callee19","_context19","_x36","_x37","_x38","_getLargestAccounts","_callee20","arg","_context20","_x39","_getTokenLargestAccounts","_callee21","mintAddress","_context21","_x40","_x41","_getAccountInfoAndContext","_callee22","_extractCommitmentFro4","_context22","_x42","_x43","_getParsedAccountInfo","_callee23","_extractCommitmentFro5","_context23","_x44","_x45","_getAccountInfo","_callee24","_context24","getAccountInfoAndContext","_x46","_x47","_getMultipleParsedAccounts","_callee25","publicKeys","rawConfig","_extractCommitmentFro6","_context25","_x48","_x49","_getMultipleAccountsInfoAndContext","_callee26","_extractCommitmentFro7","_context26","_x50","_x51","_getMultipleAccountsInfo","_callee27","_context27","getMultipleAccountsInfoAndContext","_x52","_x53","_getStakeActivation","_callee28","_extractCommitmentFro8","_context28","_x54","_x55","_x56","_getProgramAccounts","_callee29","configOrCommitment","_extractCommitmentFro9","_ref26","encoding","configWithoutEncoding","baseSchema","_context29","_excluded2","withContext","_x57","_x58","_getParsedProgramAccounts","_callee30","_extractCommitmentFro10","_context30","_x59","_x60","_confirmTransaction","_callee31","strategy","rawSignature","_config$abortSignal","decodedSignature","_context31","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","_x61","_x62","signal","addEventListener","_ref27","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","_this16","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","_callee32","_context32","getSignatureStatus","_confirmTransactionUsingBlockHeightExceedanceStrategy","_callee35","_ref29","_ref29$strategy","expiryPromise","_this$getTransactionC","cancellationPromise","outcome","_this17","_context35","checkBlockHeight","_ref30","_callee33","_context33","_callee34","currentBlockHeight","_context34","BLOCKHEIGHT_EXCEEDED","getTransactionConfirmationPromise","getCancellationPromise","race","_x63","_confirmTransactionUsingDurableNonceStrategy","_callee38","_ref32","_ref32$strategy","_this$getTransactionC2","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_this18","_context38","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","_ref33","_callee36","_yield$_this18$getNon","_context36","getNonceAndContext","_callee37","_context37","NONCE_INVALID","slotInWhichNonceDidAdvance","_x64","_confirmTransactionUsingLegacyTimeoutStrategy","_callee39","_ref35","timeoutId","_this$getTransactionC3","_this19","_context39","timeoutMs","TIMED_OUT","clearTimeout","_x65","_getClusterNodes","_callee40","_context40","_getVoteAccounts","_callee41","_context41","_x66","_getSlot","_callee42","_extractCommitmentFro11","_context42","_x67","_getSlotLeader","_callee43","_extractCommitmentFro12","_context43","_x68","_getSlotLeaders","_callee44","startSlot","limit","_context44","_x69","_x70","_getSignatureStatus","_callee45","_yield$this$getSignat","_context45","getSignatureStatuses","_x71","_x72","_getSignatureStatuses","_callee46","_context46","_x73","_x74","_getTransactionCount","_callee47","_extractCommitmentFro13","_context47","_x75","_getTotalSupply","_callee48","_context48","getSupply","excludeNonCirculatingAccountsList","_x76","_getInflationGovernor","_callee49","_context49","_x77","_getInflationReward","_callee50","_extractCommitmentFro14","_context50","_x78","_x79","_x80","_getInflationRate","_callee51","_context51","_getEpochInfo","_callee52","_extractCommitmentFro15","_context52","_x81","_getEpochSchedule","_callee53","epochSchedule","_context53","_getLeaderSchedule","_callee54","_context54","_getMinimumBalanceForRentExemption","_callee55","_context55","_x82","_x83","_getRecentBlockhashAndContext","_callee56","_context56","_x84","_getRecentPerformanceSamples","_callee57","_context57","_x85","_getFeeCalculatorForBlockhash","_callee58","_res$result","_context58","_x86","_x87","_getFeeForMessage","_callee59","wireMessage","_context59","_x88","_x89","_getRecentPrioritizationFees","_callee60","_config$lockedWritabl","_context60","lockedWritableAccounts","_x90","_getRecentBlockhash","_callee61","_context61","getRecentBlockhashAndContext","_x91","_getLatestBlockhash","_callee62","_context62","getLatestBlockhashAndContext","_x92","_getLatestBlockhashAndContext","_callee63","_extractCommitmentFro16","_context63","_x93","_getVersion","_callee64","_context64","_getGenesisHash","_callee65","_context65","_getBlock","_callee66","_extractCommitmentFro17","_res","_res2","_context66","_buildArgsAtLeastConfirmed","transactionDetails","_ref36","_x94","_x95","_getParsedBlock","_callee67","_extractCommitmentFro18","_res3","_res4","_context67","_x96","_x97","_getBlockProduction","_callee68","extra","_context68","_excluded3","_x98","_getTransaction","_callee69","_extractCommitmentFro19","_context69","_x99","_x100","_getParsedTransaction","_callee70","_extractCommitmentFro20","_context70","_x101","_x102","_getParsedTransactions","_callee71","_extractCommitmentFro21","_this20","_context71","_x103","_x104","_getTransactions","_callee72","_extractCommitmentFro22","_this21","_context72","_x105","_x106","_getConfirmedBlock","_callee73","block","_context73","_ref37","_ref38","_x107","_x108","_getBlocks","_callee74","endSlot","_context74","_x109","_x110","_x111","_getBlockSignatures","_callee75","_context75","_x112","_x113","_getConfirmedBlockSignatures","_callee76","_context76","_x114","_x115","_getConfirmedTransaction","_callee77","_context77","_x116","_x117","_getParsedConfirmedTransaction","_callee78","_context78","_x118","_x119","_getParsedConfirmedTransactions","_callee79","_this22","_context79","_x120","_x121","_getConfirmedSignaturesForAddress","_callee80","firstAvailableBlock","highestConfirmedRoot","_block","confirmedSignatureInfo","_context80","getFirstAvailableBlock","getConfirmedBlockSignatures","until","before","getConfirmedSignaturesForAddress2","_x122","_x123","_x124","_getConfirmedSignaturesForAddress2","_callee81","_context81","_x125","_x126","_x127","_getSignaturesForAddress","_callee82","_context82","_x128","_x129","_x130","_getAddressLookupTable","_callee83","_yield$this$getAccoun","accountInfo","_context83","_x131","_x132","_getNonceAndContext","_callee84","_yield$this$getAccoun2","_context84","fromAccountData","_x133","_x134","_getNonce","_callee85","_context85","_x135","_x136","_requestAirdrop","_callee86","_context86","_x137","_x138","_blockhashWithExpiryBlockHeight2","_callee87","disableCache","timeSinceFetch","expired","_context87","Date","now","_pollNewBlockhash","_x139","_pollNewBlockhash2","_callee88","startTime","cachedLatestBlockhash","cachedBlockhash","_context88","getLatestBlockhash","_getStakeMinimumDelegation","_callee89","_extractCommitmentFro23","_context89","_x140","_simulateTransaction","_callee90","transactionOrMessage","configOrSigners","includeAccounts","_wireTransaction","_encodedTransaction","_config","_args91","_unsafeRes","_res5","originalTx","_transaction3","_transaction4","_signature3","encodedTransaction","traceIndent","logTrace","_context90","_blockhashWithExpiryBlockHeight","nonProgramIds","sigVerify","_x141","_x142","_x143","_sendTransaction","_callee91","signersOrOptions","_wireTransaction2","_signature4","_context91","sendRawTransaction","_x144","_x145","_x146","_sendRawTransaction","_callee92","rawTransaction","_context92","sendEncodedTransaction","_x147","_x148","_sendEncodedTransaction","_callee93","_context93","_x149","_x150","_this23","setInterval","_callee94","_context94","notify","_updateSubscriptions","_this24","MAX_SAFE_INTEGER","clearInterval","_ref40","_ref41","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","_unused4","clientSubscriptionId","_this$_subscriptionSt","_this25","_updateSubscriptions2","_callee98","activeWebSocketGeneration","isCurrentConnectionStillActive","_this26","_context98","close","connect","_ref42","_callee97","_context97","callbacks","serverSubscriptionId","_callee95","_context95","_callee96","unsubscribeMethod","_context96","_x151","callbackArgs","notification","_create","_handleServerNotification","subscriptionConfig","_this27","existingSubscription","_callee99","_context99","_makeSubscription","_removeAccountChangeListener","_callee100","_context100","_unsubscribeClientSubscription","_x152","_create2","accountId","filters","_removeProgramAccountChangeListener","_callee101","_context101","_x153","mentions","_removeOnLogsListener","_callee102","_context102","_x154","_create3","_create4","_removeSlotChangeListener","_callee103","_context103","_x155","_create5","_removeSlotUpdateListener","_callee104","_context104","_x156","_unsubscribeClientSubscription2","_callee105","subscriptionName","dispose","_context105","_x157","_x158","override","_create6","_this28","_err","_this29","_options$commitment","_excluded4","_removeSignatureListener","_callee106","_context106","_x159","_create7","_removeRootChangeListener","_callee107","_context107","_x160","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","_PublicKey$findProgra","recentSlot","_PublicKey$findProgra2","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","_params$instructionIn","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","_ecdsaSign","toCompactRawBytes","ecdsaSign","_ecdsaSign2","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","VoteProgram","Voter","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","createChainIdMiddleware","chainId","req","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","_ref2","requestAccounts","_ref6","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_BaseProvider","chainConfig","_objectSpread$3","chainNamespace","CHAIN_NAMESPACES","SOLANA","_switchChain","_setupProvider","injectedProvider","engine","solanaMiddleware","configMiddleware","injectedProviderProxy","provider","JRPCEngine","getProviderHandlers","getInjectedProviderProxy","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","methodNotSupported","_getSecretKey","_signTransaction","_signMessage","sigData","display","_signAllTransactions","_req$params","_req$params2","invalidParams","_signAndSendTransaction","txRes","createInjectedProviderProxyMiddleware","_ref8","_next","_objectSpread$2","PhantomInjectedProvider","_BaseInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","_BaseInjectedProvider2","getProviderEngineProxy","_requestAccounts2","_yield$injectedProvid","_getAccounts2","_yield$injectedProvid2","_getPrivateKey2","_getSecretKey2","_signTransaction2","txMessage","_yield$injectedProvid3","invalidRequest","addSignature","_signMessage2","_signAndSendTransaction2","_yield$injectedProvid4","conn","custom","_signAllTransactions2","_data$signatures","allTxns","unsignedTx","_yield$injectedProvid5","getSlopeHandlers","SolflareInjectedProvider","_BaseInjectedProvider3","solflareProviderHandlers","getSolflareHandlers","getTorusHandlers","_requestAccounts3","_getAccounts3","_getPrivateKey3","_getSecretKey3","_signMessage3","_signTransaction3","_signAndSendTransaction3","_req$params3","_signAllTransactions3","_req$params4","_req$params5","TorusInjectedProvider","_BaseProvider2","_objectSpread$1","_switchChain2","_setupProvider2","handleInjectedProviderUpdate","setupEngine","_lookupNetwork2","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","_setupEngine","_handleInjectedProviderUpdate","_ref10","configure","setupProvider","_getProviderHandlers","keyPairGenerator","keyPair","_requestAccounts5","_getAccounts4","_getPrivateKey4","_getSecretKey4","_signTransaction5","partialSign","_signMessage5","signedMsg","nacl","detached","_signAndSendTransaction5","_providerEngineProxy","_signAllTransactions5","_req$params6","txns","tx","SolanaPrivateKeyProvider","_BaseProvider3","_enable","_setupProvider3","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","_updateAccount","_switchChain3","getChainConfig","_lookupNetwork3","health","chainSwitchHandlers","addNewChainConfig","_addNewChainConfig","_req$params7","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","_switchSolanaChain","switchChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_updatePrivatekey","updateAccount","_ref4","createAccountMiddleware","_ref12","providerFactory","SolanaWallet","_defineProperty","_requestAccounts4","_signAndSendTransaction4","_yield$this$provider$","_signTransaction4","signedTransaction","_signAllTransactions4","signedTransactions","_signMessage4","_request","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","reversed","width","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","_structSchema$values$","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","_structSchema$values$2","fieldValue","basex","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","send","promise","_login","resp","_listMethods","_subscribe","_unsubscribe","ArrayBuffer","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","toLowerCase","rnds","random","runtime","regeneratorRuntime","accidentalStrictMode","Function","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints","excluded","sourceKeys","sourceSymbolKeys"],"sourceRoot":""}